
package gtp_classes;


public class Pre {
 
public String respuesta;
public String respuesta2;

private String p1 ="¿Qué son las herencias en programación?";
private String p2 ="¿Para qué sirve el poliformismo?";
private String p3 ="¿Cual es la diferencia entre herencias y poliformismo?";
private String p4 ="¿Qué es el poliformismo?";
private String p5 ="¿Qué deben cumplir los objetos que se utilizan de manera polimórfica ?";
private String p6 ="¿Qué beneficios tiene utilizar herencias?";
private String p7 ="¿Cuándo usar una interfaz y cuándo usar una herencia?";
private String p8 ="¿Cuál es el fin de las herencias?";
private String p9 ="¿Cuál es la clasificación de las herencias?";
private String p10 ="¿Qué es la herencia simple?";

private String p11 ="¿Qué es una herencia múltiple?";
private String p12 ="¿Qué es una herencia multinivel?";
private String p13 ="¿Qué es una herencia jerárquica?";
private String p14 ="¿Para qué sirve el polimorfismo en Java?";
private String p15 ="¿Qué tipos de poliformismo existen en java?";
private String p16 ="¿Qué es el Polimorfismo estático?";
private String p17 ="¿Qué es el Polimorfismo dinámico?";
private String p18 ="¿Qué es una clase base?";
private String p19 ="¿Qué es una clase derivada?";
private String p20 ="Las herencias se pueden hacer de dos tipos, ¿cuales son?";

private String p21 ="¿Qué es una herencia pública?";
private String p22 ="¿Cómo se declara una clase pública?";
private String p23 ="¿Qué es una herencia protegida?";
private String p24 ="¿Cómo se declara una clase Protegida?";
private String p25 ="¿Qué es una herencia privada?";
private String p26 ="¿Cómo se declara una clase privada?";
private String p27 ="¿Qué es la sobrecarga en el poliformismo?";
private String p28 ="¿Qué es el polimorfismo paramétrico?";
private String p29 ="¿Qué es una clase abstracta?";
private String p30 ="¿Cómo se define una clase abstracta en java?";


public String responder(String pregunta){
    
if        (pregunta.equals(p1)) {
   respuesta = "-Son características que permiten crear clases que reutilizan,"
           + " extienden y modifican el comportamiento definido en otras clases."; 
} else if (pregunta.equals(p2)) {
   respuesta = "-Nos ayuda a simplificar el código y"
           + " reducir el número de clases que los programadores deben conocer"; 
} else if (pregunta.equals(p3)) {
 respuesta = "-	La herencia es que una subclase hereda el comportamiento y"
         + " la información de su clase principal, mientras que el polimorfismo es que un método puede hacer "
         + "cosas diferentes según la cantidad y el tipo de parámetros.";
} else if (pregunta.equals(p4)) {
   respuesta = "-Es la capacidad que tienen ciertos lenguajes para hacer que,"
           + " al enviar el mismo mensaje desde distintos objetos, cada uno de esos objetos "; 
} else if (pregunta.equals(p5)) {
 respuesta = "Obligatoriamente deben responder al mensaje que se le envía";
} else if (pregunta.equals(p6)) {
   respuesta = "Permite que se puedan definir nuevas clases basadas de unas ya existentes "
           + "a fin de reutilizar el código, generando así una jerarquía de clases dentro de una aplicación."; 
} else if (pregunta.equals(p7)) {
 respuesta = "Se usa una interfaz cuando se requiere implementar métodos a una clase, pero que no existen en otra.Se usa una herencia cuando "
         + "una clase requiere acceso a los mismos propiedades y métodos que ya posee en su cuerpo otra clase.";
} else if (pregunta.equals(p8)) {
   respuesta = "Es el mecanismo por el cual una clase permite heredar las"
           + " características (atributos y métodos) de otra clase."; 
} else if (pregunta.equals(p9)) {
 respuesta = "Se clasifica en: la herencia simple, múltiple, multinivel, jerárquica.";
} else if (pregunta.equals(p10)) {
   respuesta = "Es cuando una clase hija hereda de una sola clase padre,"
           + " es decir hereda datos y métodos de una sola clase."; 
} else if (pregunta.equals(p11)) {
 respuesta = "Una clase puede heredar comportamientos "
         + "y características de más de una superclase.";
} else if (pregunta.equals(p12)) {
   respuesta = "Una clase hija hereda de una clase padre,"
           + " que a su vez es clase hija de otra clase padre"; 
} else if (pregunta.equals(p13)) {
 respuesta = "-	Una clase padre hereda a dos o más clases hijas";
} else if (pregunta.equals(p14)) {
   respuesta = "Permite que nombres dos acciones del mismo modo dentro de tu código,"
           + " pero que cada una de ellas acepte diferentes parámetros. "
           + "Esto facilita que identifiques objetos nominalmente, "
           + "pero que cada uno de ellos desempeñe una función en particular"; 
} else if (pregunta.equals(p15)) {
 respuesta = "-	Polimorfismo estático (o de compilación)\n" +
             "-Polimorfismo dinámico (o de ejecución)";
} else if (pregunta.equals(p16)) {
   respuesta = "Se utiliza para crear múltiples métodos con el mismo nombre en la misma clase,"
           + " que contengan diferentes números de parámetros o bien parámetros de distintos tipos"; 
} else if (pregunta.equals(p17)) {
 respuesta = "Es aquel en el que la clase hija tiene una definición propia,"
          + " pero que depende de la clase en la que está anidada";
} else if (pregunta.equals(p18)) {
   respuesta = "Se conoce como clase base a una clase que va a heredar "
           + "sus propiedades (variables) y funcionalidades (métodos) a otras clases."; 
} else if (pregunta.equals(p19)) {
 respuesta = "-	Se conoce como clase derivada a una clase que se implementa mediante la reutilización de las "
           + "propiedades y funcionalidades que se heredan de una (o varias) clase base";
} else if (pregunta.equals(p20)) {
   respuesta = "-Herencia Pública\n" +
               "-Herencia Protegida \n" +
               "-Herenia Privada"; 
} else if (pregunta.equals(p21)) {
 respuesta = "Se refiere a la herencia en la que todos los miembros públicos y protegidos de la clase "
           + "base conservan esos mismos niveles de acceso respectivamente en las clases derivadas.";
} else if (pregunta.equals(p22)) {
   respuesta = "class ClaseDerivada : public ClaseBase"; 
} else if (pregunta.equals(p23)) {
 respuesta = "Se refiere a la herencia en la que todos los miembros públicos de la clase base "
           + "adquieren el nivel de acceso protegido en las clases derivadas, mientras que los miembros"
           + " protegidos conservan su nivel de acceso. Una clase derivada puede luego heredar a otra clase "
           + "los miembros protegidos que heredó de su clase base.";
} else if (pregunta.equals(p24)) {
   respuesta = "class ClaseDerivada : protected ClaseBase"; 
} else if (pregunta.equals(p25)) {
 respuesta = "Se refiere a la herencia en la que todos los miembros públicos y protegidos de la"
           + " clase base adquieren el nivel de acceso privado en las clases derivadas. De ahí se"
           + " desprende que una clase derivada que haya heredado mediante herencia privada no puede"
           + " heredar a otras clases los miembros que ha heredado de otras clases.";
} else if (pregunta.equals(p26)) {
   respuesta = "class ClaseDerivada : protected ClaseBase"; 
} else if (pregunta.equals(p27)) {
 respuesta = "Sobrecarga: El más conocido y se aplica cuando existen funciones con el mismo "
           + "nombre en clases que son completamente independientes una de la otra.";
} else if (pregunta.equals(p28)) {
 respuesta = "Existen funciones con el mismo nombre pero se usan diferentes parámetros"
           + " (nombre o tipo). Se selecciona el método dependiendo del tipo de datos que se envíe."; 
} else if (pregunta.equals(p29)){
    respuesta = "En Java, una clase abstracta es una clase que no puede ser instanciada\n" 
+"directamente, lo que significa que no se pueden crear objetos directamente a\n" 
+"partir de ella. Las clases abstractas se utilizan como plantillas o superclases\n" 
+"para otras clases concretas."
+ " (nombre o tipo). Se selecciona el método dependiendo del tipo de datos que se envíe.";
}else if (pregunta.equals(p30)){
    respuesta = "una clase abstracta en Java es una clase que no puede ser instanciada directamente\n" +
            " y se utiliza como una plantilla o superclase para otras clases concretas."+
            " Puede contener métodos abstractos y concretos, lo que permite definir una"+
            " estructura general y reutilizable para las clases derivadas.";
}
else {

 respuesta = "no es posible completar su soclicitud";
}
//return respuesta;


    

    
if(pregunta.equals(p1)) {
   respuesta2 = "La herencia en programación Python es un concepto que permite que una\n" +
"clase herede atributos y métodos de otra clase, lo que promueve la\n" +
"reutilización de código y la creación de una jerarquía de clases";
           
} else if (pregunta.equals(p2)) {
   respuesta2 = "el polimorfismo en Python nos permite tratar diferentes objetos de manera\n" +
"uniforme, lo que facilita la reutilización de código y la creación de programas\n" +
"más flexibles y extensibles"; 
} else if (pregunta.equals(p3)) {
 respuesta2 = "La diferencia entre herencia y polimorfismo es que la herencia se refiere a la\n" +
"relación entre clases, donde una clase puede heredar atributos y métodos de\n" +
"otra clase, mientras que el polimorfismo se refiere a la capacidad de un\n" +
"objeto de tomar diferentes formas y comportarse de diferentes.";
} else if (pregunta.equals(p4)) {
   respuesta2 = "El polimorfismo es la capacidad de un objeto de tomar diferentes formas y\n" +
"comportarse de diferentes maneras. En el contexto de la programación orientada a\n" +
"\n" +
"objetos, esto se logra a través de la capacidad de los objetos de una clase para\n" +
"responder a los mismos métodos de manera diferente."; 
} else if (pregunta.equals(p5)) {
 respuesta2 = "Los objetos que se utilizan de manera polimórfica deben cumplir con el\n" +
"principio de sustitución de Liskov, lo que significa que un objeto de una clase\n" +
"derivada debe poder ser utilizado en lugar de un objeto de la clase base sin\n" +
"afectar el comportamiento del programa.";
} else if (pregunta.equals(p6)) {
   respuesta2 = "Los beneficios de utilizar herencias incluyen la reutilización de código, la\n" +
"extensibilidad, la facilidad de mantenimiento y la capacidad de lograr el\n" +
"polimorfismo."; 
} else if (pregunta.equals(p7)) {
 respuesta2 = "Se utiliza una interfaz cuando se desea definir un contrato que las clases\n" +
"deben cumplir, mientras que se utiliza la herencia cuando se desea heredar\n" +
"atributos y métodos de una clase base. ";
} else if (pregunta.equals(p8)) {
   respuesta2 = "El fin de las herencias es permitir la reutilización de código y la creación de\n" +
"niveles de clases, lo que facilita la organización y estructura del código y\n" +
"permite la creación de programas más flexibles y extensibles."; 
} else if (pregunta.equals(p9)) {
 respuesta2 = "En Python, las herencias se pueden clasificar en tres tipos principales:\n" +
"a) Herencia Simple: En la herencia simple, una clase derivada\n" +
"(subclase) hereda atributos y métodos de una sola clase base\n" +
"(superclase). Es la forma más común de herencia y se utiliza cuando\n" +
"una clase se basa en una única fuente de funcionalidad común.\n" +
"b) Herencia Múltiple: En la herencia múltiple, una clase derivada\n" +
"(subclase) puede heredar atributos y métodos de más de una clase\n" +
"base (superclase). Esto permite combinar funcionalidades de\n" +
"múltiples clases base en una sola subclase. Sin embargo, debe\n" +
"usarse con cuidado ya que puede dar lugar a conflictos de nombres y\n" +
"ambigüedades.\n" +
"\n" +
"c) Herencia Multinivel: La herencia multinivel implica la creación de una\n" +
"jerarquía de clases en la que una clase derivada (subclase) hereda de\n" +
"otra clase derivada. En otras palabras, una subclase puede heredar\n" +
"de una clase que ya es una subclase de otra. Esto permite organizar\n" +
"las clases en una jerarquía en múltiples niveles.";
} else if (pregunta.equals(p10)) {
   respuesta2 = "La herencia simple es cuando una clase hereda de una única clase base."; 
} else if (pregunta.equals(p11)) {
 respuesta2 = "La herencia múltiple en el lenguaje de programación Python se refiere a la\n" +
"capacidad de una clase derivada (subclase o clase hija) para heredar\n" +
"atributos y métodos de más de una clase base (superclase o clase padre).";
} else if (pregunta.equals(p12)) {
   respuesta2 = "La herencia multinivel en el lenguaje de programación Python se refiere a\n" +
"una estructura de herencia en la que una clase derivada (subclase o clase\n" +
"hija) hereda de otra clase derivada, creando una cadena o jerarquía de\n" +
"clases en múltiples niveles."; 
} else if (pregunta.equals(p13)) {
 respuesta2 = "La herencia jerárquica es una forma poderosa de organizar y modelar objetos en\n" +
"Python, ya que permite la reutilización de código al definir comportamientos\n" +
"comunes en la clase base y al mismo tiempo permite la especialización en las\n" +
"clases derivadas para adaptarse a necesidades específicas";
} else if (pregunta.equals(p14)) {
   respuesta2 = "El polimorfismo en Python sirve para tratar diferentes objetos de manera\n" +
"uniforme, lo que facilita la reutilización de código y la creación de programas\n" +
"más flexibles y extensibles."; 
} else if (pregunta.equals(p15)) {
 respuesta2 = "En Python, existen dos tipos de polimorfismo: el polimorfismo estático y el\n" +
"polimorfismo dinámico.";
} else if (pregunta.equals(p16)) {
   respuesta2 = "El polimorfismo estático se refiere al polimorfismo que se resuelve en tiempo\n" +
"de compilación, basado en el tipo estático de los objetos."; 
} else if (pregunta.equals(p17)) {
 respuesta2 = "El polimorfismo dinámico se refiere al polimorfismo que se resuelve en\n" +
"tiempo de ejecución, basado en el tipo dinámico de los objetos.";
} else if (pregunta.equals(p18)) {
   respuesta2 = "Una clase base es una clase que sirve como punto de partida o plantilla para\n" +
"la creación de otras clases. También se le conoce como clase padre o\n" +
"superclase."; 
} else if (pregunta.equals(p19)) {
 respuesta2 = "Una clase derivada es una clase que se crea tomando como base una clase\n" +
"existente (clase base o superclase) y añadiendo o modificando sus atributos\n" +
"y métodos. También se le llama clase hija o subclase.";
} else if (pregunta.equals(p20)) {
   respuesta2 = "Las herencias se pueden hacer de dos tipos: herencia simple y herencia\n" +
"múltiple. En la herencia simple, una clase derivada solo puede heredar de\n" +
"una sola clase base. En la herencia múltiple, una clase derivada puede\n" +
"heredar de varias clases base."; 
} else if (pregunta.equals(p21)) {
 respuesta2 = "La herencia pública es un tipo de herencia en la que los atributos y métodos\n" +
"de la clase base que se heredan son accesibles directamente desde la clase\n" +
"derivada sin restricciones.";
} else if (pregunta.equals(p22)) {
   respuesta2 = "En Python, todas las clases son públicas por defecto. No es necesario\n" +
"declarar explícitamente una clase como pública. Cualquier clase definida en\n" +
"un módulo Python es accesible desde cualquier otro módulo."; 
} else if (pregunta.equals(p23)) {
 respuesta2 = "La herencia protegida es un tipo de herencia en la que los atributos y\n" +
"métodos de la clase base que se heredan son accesibles desde la clase\n" +
"derivada, pero se consideran &quot;protegidos&quot;. Esto significa que se recomienda\n" +
"no acceder a ellos directamente desde fuera de la clase derivada, aunque\n" +
"técnicamente aún es posible hacerlo.";
} else if (pregunta.equals(p24)) {
   respuesta2 = "En Python, la protección de miembros de clase (atributos o métodos) se logra\n" +
"mediante una convención de nomenclatura. Se añade un prefijo de un guion\n" +
"bajo simple (_) al nombre del atributo o método, indicando que debería\n" +
"considerarse protegido, aunque no hay una restricción real de acceso."; 
} else if (pregunta.equals(p25)) {
 respuesta2 = "La herencia privada no es un concepto que exista en Python. Python no\n" +
"admite un nivel de acceso privado como algunos otros lenguajes de\n" +
"programación.";
} else if (pregunta.equals(p26)) {
   respuesta2 = "En Python, no se declaran clases como privadas. Puedes utilizar la\n" +
"convención de nomenclatura añadiendo un doble guion bajo (__nombre) a un\n" +
"atributo o método para indicar que es privado, pero aún así, Python no lo\n" +
"hace completamente privado y permite un acceso indirecto."; 
} else if (pregunta.equals(p27)) {
 respuesta2 = "La sobrecarga en el polimorfismo se refiere a la capacidad de definir\n" +
"múltiples métodos con el mismo nombre en una clase o en clases diferentes,\n" +
"\n" +
"pero con diferentes listas de argumentos. La elección de qué método se\n" +
"llama se basa en los argumentos proporcionados al invocar el método.";
} else if (pregunta.equals(p28)) {
 respuesta2 = "El polimorfismo paramétrico es un tipo de polimorfismo en el que se pueden\n" +
"crear funciones o clases que pueden trabajar con diferentes tipos de datos\n" +
"sin conocer los tipos concretos de antemano."; 
} else if (pregunta.equals(p29)){
    respuesta2 = "Una clase abstracta en Python es una clase que no puede ser instanciada\n" +
"directamente y generalmente se utiliza como una clase base para otras\n" +
"clases concretas.";
}else if (pregunta.equals(p30)){
    respuesta2 = "Para definir una clase abstracta en Python, se utiliza el módulo &quot;abc&quot;\n" +
"(Abstract Base Classes). Debes importar &quot;ABC&quot; y &quot;abstractmethod&quot; y luego\n" +
"crear una clase que herede de &quot;ABC&quot; y marcar los métodos que deben ser\n" +
"implementados como abstractos usando el decorador &quot;@abstractmethod&quot;.";
}
else {

 respuesta2 = "no es posible completar su soclicitud";
}

return respuesta2;


}
}
 
